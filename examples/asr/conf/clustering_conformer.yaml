# It contains the default values for training a Conformer-CTC ASR model, large size (~120M) with CTC loss and char-based vocabulary.
# Char-based encoding may give worse results than sub-word encoding (conformer_ctc_bpe.yaml) due to the 4x sub-sampling.
# Default learning parameters in this config are set for effective batch size of 2K.
# To train it with smaller effective batch sizes, you may need to re-tune the learning parameters or use higher accumulate_grad_batches.

# Here are the recommended configs for different variants of Conformer-CTC, other parameters are the same as in this config file.
# One extra layer (compared to original paper) is added to the medium and large variants to compensate for replacing the LSTM decoder with a linear one.

#  +-------------+---------+---------+----------+------------+
#  | Model       | d_model | n_heads | n_layers | time_masks |
#  +=============+=========+========+===========+============+
#  | Small  (13M)|   176   |    4   |    16     |     5      |
#  +-------------+---------+--------+-----------+------------+
#  | Medium (30M)|   256   |    4   |    17     |     10     |
#  +-------------+---------+--------+-----------+------------+
#  | Large (121M)|   512   |    8   |    18     |     10     |
#  +----------------------------------------------------------

name: "Conformer-Clustering"

model:
  sample_rate: 16000
  labels:  [0,1,2,3]
  log_prediction: true # enables logging sample predictions in the output during training
  ctc_reduction: 'mean_batch'

  train_ds:
    manifest_filepath: ???
    is_speaker_emb: true
    labels: ${model.labels}
    sample_rate: ${model.sample_rate}
    batch_size: 50 # you may increase batch_size if your memory allows
    shuffle: true
    num_workers: 20
    pin_memory: true
    trim_silence: false
    max_duration: 16.7 # it is set for LibriSpeech, you may need to update it for your dataset
    min_duration: 0.1

  validation_ds:
    manifest_filepath: ???
    is_speaker_emb: true
    labels: ${model.labels}
    sample_rate: ${model.sample_rate}
    batch_size: 50 # you may increase batch_size if your memory allows
    shuffle: false
    num_workers: 20
    pin_memory: true


  encoder:
    _target_: nemo.collections.asr.modules.ConformerEncoder
    feat_in: 32
    feat_out: -1 # you may set it if you need different output size other than the default d_model
    n_layers: 4 #16
    d_model: 176

    subsampling: false
    # Feed forward module's params
    ff_expansion_factor: 4

    # Multi-headed Attention Module's params
    self_attention_model: rel_pos # rel_pos or abs_pos
    n_heads: 4 # may need to be lower for smaller d_models
    # [left, right] specifies the number of steps to be seen from left and right of each step in self-attention
    att_context_size: [-1, -1] # -1 means unlimited context
    xscaling: true # scales up the input embeddings by sqrt(d_model)
    untie_biases: true # unties the biases of the TransformerXL layers
    pos_emb_max_len: 5000

    # Convolution module's params
    conv_kernel_size: 1 #31

    ### regularization
    dropout: 0.4 # The dropout used in most of the Conformer Modules
    dropout_emb: 0.4 #0.0 # The dropout used for embeddings
    dropout_att: 0.4 # The dropout for multi-headed attention modules

  # decoder:
  #   _target_: nemo.collections.asr.modules.ConvASRDecoder
  #   feat_in: null
  #   num_classes: 4
  #   vocabulary: ${model.labels}
  #   return_logits: true

  decoder:
    _target_: nemo.collections.asr.modules.LSTMDecoder
    feat_in: null
    num_classes: 4
    num_layers: 1
    lstm_hidden_size: 100
    vocabulary: ${model.labels}
    return_logits: true

  optim:
    name: adam
    lr: 2
    # optimizer arguments
    betas: [0.9, 0.98]
    # less need for weight_decay as we already have large augmentations with SpecAug
    # you may need weight_decay for large models, small datasets, or when lower augmentation is used
    weight_decay: 0.001

    # scheduler setup
    sched:
      name: NoamAnnealing
      d_model: ${model.encoder.d_model}
      # scheduler config override
      # warmup_steps: 10000
      warmup_ratio: 0.2
      min_lr: 1e-6

trainer:
  gpus: -1 # number of GPUs, -1 would use all available GPUs
  num_nodes: 1
  max_epochs: 50 #50
  max_steps: null # computed at runtime if not set
  val_check_interval: 1.0 # Set to 0.25 to check 4 times per epoch, or an int for number of iterations
  accelerator: ddp
  accumulate_grad_batches: 1
  gradient_clip_val: 0.0
  amp_level: O0 # O1/O2 for mixed precision
  precision: 32 # Should be set to 16 for O1 and O2 to enable the AMP.
  log_every_n_steps: 10  # Interval of logging.
  progress_bar_refresh_rate: 10
  resume_from_checkpoint: null # The path to a checkpoint file to continue the training, restores the whole state including the epoch, step, LR schedulers, apex, etc.
  num_sanity_val_steps: 0 # number of steps to perform validation steps for sanity check the validation process before starting the training, setting to 0 disables it
  check_val_every_n_epoch: 1 # number of evaluations on validation every n epochs
  sync_batchnorm: true
  checkpoint_callback: false  # Provided by exp_manager
  logger: false  # Provided by exp_manager


exp_manager:
  exp_dir: null
  name: ${name}
  create_tensorboard_logger: true
  create_checkpoint_callback: true
  checkpoint_callback_params:
    # in case of multiple validation sets, first one is used
    monitor: "val_acc"
    mode: "max"
    save_top_k: 3

  # you need to set these two to True to continue the training
  resume_if_exists: false
  resume_ignore_no_checkpoint: false

  # You may use this section to create a W&B logger
  create_wandb_logger: true
  wandb_logger_kwargs:
    name: "noplus1_conv1_lr2_b50"
    project: "dnc_lstm"
