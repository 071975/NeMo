name: "Transformer-Clustering"

model:
  sample_rate: 16000
  labels:  [0,1,2,3]
  log_prediction: true # enables logging sample predictions in the output during training
  ctc_reduction: 'mean_batch'

  train_ds:
    manifest_filepath: ???
    is_speaker_emb: true
    labels: ${model.labels}
    sample_rate: ${model.sample_rate}
    batch_size: 50 # you may increase batch_size if your memory allows
    shuffle: true
    num_workers: 10
    pin_memory: true

  validation_ds:
    manifest_filepath: ???
    is_speaker_emb: true
    labels: ${model.labels}
    sample_rate: ${model.sample_rate}
    batch_size: 50 # you may increase batch_size if your memory allows
    shuffle: false
    num_workers: 10
    pin_memory: true

  test_ds:
    manifest_filepath: null
    labels: ${model.labels}
    sample_rate: ${model.sample_rate}
    batch_size: 50 # you may increase batch_size if your memory allows
    shuffle: false
    num_workers: 10
    pin_memory: true

  encoder:
    _target_: nemo.collections.asr.modules.TransformerEncoderNM
    vocab_size: 32
    hidden_size: 256
    num_layers: 4
    inner_size : 256 #1024 
    num_attention_heads: 4
    attn_score_dropout: 0.1
    attn_layer_dropout: 0.1
    ffn_dropout: 0.1
    learn_positional_encodings: true
    pre_ln: true
    max_sequence_length: 5000
  
  decoder:
    _target_: nemo.collections.asr.modules.TransformerDecoderNM
    vocab_size: 5
    hidden_size: 256
    num_layers: 4
    inner_size : 256 #1024 
    num_attention_heads: 4
    attn_score_dropout: 0.1
    attn_layer_dropout: 0.1
    ffn_dropout: 0.1
    learn_positional_encodings: true
    pre_ln: true
    restricted: 1 #-1
    max_sequence_length: 5000


  optim:
    name: adam
    lr: 5 #12
    # optimizer arguments
    betas: [0.9, 0.98]
    # less need for weight_decay as we already have large augmentations with SpecAug
    # you may need weight_decay for large models, small datasets, or when lower augmentation is used
    weight_decay: 0 # 0.001
    eps: 1e-9

    # scheduler setup
    sched:
      name: NoamAnnealing
      d_model: ${model.encoder.hidden_size} #${model.encoder.d_model} #hidden_size
      # scheduler config override 
      # warmup_steps: 40000
      # warmup_ratio: 0.4
      warmup_steps: 5000
      min_lr: 1e-6

trainer:
  gpus: -1 # number of GPUs, -1 would use all available GPUs
  num_nodes: 1
  max_epochs: 10
  max_steps: null # computed at runtime if not set
  val_check_interval: 1.0 # Set to 0.25 to check 4 times per epoch, or an int for number of iterations
  accelerator: ddp
  accumulate_grad_batches: 1
  gradient_clip_val: 5
  amp_level: O0 # O1/O2 for mixed precision
  precision: 32 # Should be set to 16 for O1 and O2 to enable the AMP.
  log_every_n_steps: 10  # Interval of logging.
  progress_bar_refresh_rate: 10
  resume_from_checkpoint: null # The path to a checkpoint file to continue the training, restores the whole state including the epoch, step, LR schedulers, apex, etc.
  num_sanity_val_steps: 0 # number of steps to perform validation steps for sanity check the validation process before starting the training, setting to 0 disables it
  check_val_every_n_epoch: 1 # number of evaluations on validation every n epochs
  sync_batchnorm: true
  checkpoint_callback: false  # Provided by exp_manager
  logger: false  # Provided by exp_manager


exp_manager:
  exp_dir: null
  name: ${name}
  create_tensorboard_logger: true
  create_checkpoint_callback: true
  checkpoint_callback_params:
    save_best_model: True
    # in case of multiple validation sets, first one is used
    monitor: "val_acc"
    mode: "max"
    save_top_k: 3
    

  # you need to set these two to True to continue the training
  resume_if_exists: false
  resume_ignore_no_checkpoint: false

  # You may use this section to create a W&B logger
  create_wandb_logger: true
  wandb_logger_kwargs:
    name: "res1_50"
    project: "new_trans+trans"
