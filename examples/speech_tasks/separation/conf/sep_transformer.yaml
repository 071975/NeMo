# Contains the default values for training a SepFormer model

name: "Sep_Transformer"

train: True
num_sources: 2

model:
  sample_rate: 8000
  original_sample_rate: 16000
  skip_nan_grad: false
  train_ds:
    manifest_filepath: ???
    sample_rate: ${model.sample_rate}
    orig_sr: ${model.original_sample_rate}
    num_sources: ${num_sources}
    batch_size: 1 
    shuffle: true
    num_workers: 4
    pin_memory: true
    trim_silence: false
    max_duration: 20
    min_duration: 0.1
    # tarred datasets
    is_tarred: false
    tarred_audio_filepaths: null
    shuffle_n: 2048
    # bucketing params
    bucketing_strategy: "synced_randomized"
    bucketing_batch_size: null

  validation_ds:
    manifest_filepath: ???
    sample_rate: ${model.sample_rate}
    orig_sr: ${model.original_sample_rate}
    num_sources: ${num_sources}
    batch_size: 1 
    shuffle: false
    num_workers: 4
    pin_memory: true

  test_ds:
    manifest_filepath: null
    sample_rate: ${model.sample_rate}
    orig_sr: ${model.original_sample_rate}
    num_sources: ${num_sources}
    batch_size: 1 
    shuffle: false
    num_workers: 4
    pin_memory: true

  d_model: 256

  preprocessor:
    _target_: nemo.collections.asr.modules.AudioToFeaturesConvPreprocessor
    out_channels: ${model.d_model}
    in_channels: 1
    kernel_size: 16

  encoder:
    _target_: nemo.collections.asr.modules.DualPathModel
    num_speakers: ${num_sources}
    feat_in: ${model.d_model}
    feat_out: ${model.d_model} # you may set it if you need different output size other than the default d_model
    num_layers: 2
    ff_expansion_factor: 4      # expansion factor in 
    chunk_len: 250
    
    ### regularization
    dropout: 0.0 # The dropout used in most of the Transformer/Conformer Modules
    dropout_emb: 0.0 # The dropout used for embeddings
    dropout_att: 0.0 # The dropout for multi-headed attention modules
    
    intra_model:
      model_type: transformer 
      num_layers: 2
      d_model: ${model.d_model}
      ff_expansion_factor: ${model.encoder.ff_expansion_factor}
      n_heads: 8
      pos_encoding: abs_pos     # choices: abs_pos
      x_scaling: False    # disabling x_scaling gives better result for transformer
      pre_norm: True
      dropout: ${model.encoder.dropout}
      dropout_emb: ${model.encoder.dropout_emb}
      dropout_att: ${model.encoder.dropout_att}

    inter_model:
      model_type: transformer
      num_layers: 2
      d_model: ${model.d_model}
      ff_expansion_factor: ${model.encoder.ff_expansion_factor}
      n_heads: 8
      pos_encoding: abs_pos
      x_scaling: False
      pre_norm: True
      dropout: ${model.encoder.dropout}
      dropout_emb: ${model.encoder.dropout_emb}
      dropout_att: ${model.encoder.dropout_att}

    linear_layer_after_inter_intra: False
    skip_around_intra: True

  decoder:
    _target_: nemo.collections.asr.modules.ConvSSDecoder
    in_channels: ${model.preprocessor.out_channels}
    out_channels: 1
    kernel_size: ${model.preprocessor.kernel_size}
    stride: 8
    bias: False

  loss:
    base_loss:
      _target_: nemo.collections.asr.losses.SiSNR
    loss_wrapper: permutation_invariance

  optim:
    name: adamw
    lr: 0.00015
    # optimizer arguments
    betas: [0.9, 0.98]
    # less necessity for weight_decay as we already have large augmentations with SpecAug
    # you may need weight_decay for large models, stable AMP training, small datasets, or when lower augmentations are used
    weight_decay: 0


trainer:
  devices: -1 # number of GPUs, -1 would use all available GPUs
  num_nodes: 1
  max_epochs: 65
  accelerator: auto
  max_steps: null # computed at runtime if not set
  val_check_interval: 1.0 # Set to 0.25 to check 4 times per epoch, or an int for number of iterations
  strategy: ddp
  accumulate_grad_batches: 1
  gradient_clip_val: 1.0
  precision: 32 # Should be set to 16 for O1 and O2 to enable the AMP.
  log_every_n_steps: 100  # Interval of logging.
  progress_bar_refresh_rate: 100
  resume_from_checkpoint: null # The path to a checkpoint file to continue the training, restores the whole state including the epoch, step, LR schedulers, apex, etc.
  num_sanity_val_steps: 0 # number of steps to perform validation steps for sanity check the validation process before starting the training, setting to 0 disables it
  check_val_every_n_epoch: 1 # number of evaluations on validation every n epochs
  sync_batchnorm: true
  checkpoint_callback: false  # Provided by exp_manager
  logger: false  # Provided by exp_manager

exp_manager:
  exp_dir: null
  name: ${name}
  create_tensorboard_logger: true
  create_checkpoint_callback: true
  checkpoint_callback_params:
    # in case of multiple validation sets, first one is used
    monitor: "val_loss"
    mode: "min"
    save_top_k: 5
    always_save_nemo: True # saves the checkpoints as nemo files instead of PTL checkpoints

  # you need to set these two to True to continue the training
  resume_if_exists: false
  resume_ignore_no_checkpoint: false

  # You may use this section to create a W&B logger
  create_wandb_logger: false
  wandb_logger_kwargs:
    name: null
    project: null