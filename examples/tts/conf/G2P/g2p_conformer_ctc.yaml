name: G2PCTC

# Dataset info
train_dataset: ???
validation_dataset: ???
do_testing: False
pretrained_model: null # .nemo

model:
  model_name: "conformer"
  dropout: null
  max_source_len: 512
#  max_target_len: 730

  embedding:
    d_model: 300
  encoder:
    _target_: nemo.collections.asr.modules.ConformerEncoder
    feat_in: ${model.embedding.d_model}
    feat_out: -1 # you may set it if you need different output size other than the default d_model
    n_layers: 16
    d_model: 256

    # Sub-sampling params
    subsampling: null # vggnet or striding, vggnet may give better results but needs more memory
    subsampling_factor: 1 # must be power of 2
    subsampling_conv_channels: -1 # set to -1 to make it equal to the d_model

    # Feed forward module's params
    ff_expansion_factor: 4

    # Multi-headed Attention Module's params
    self_attention_model: rel_pos # rel_pos or abs_pos
    n_heads: 8 # may need to be lower for smaller d_models
    # [left, right] specifies the number of steps to be seen from left and right of each step in self-attention
    att_context_size: [ -1, -1 ] # -1 means unlimited context
    xscaling: true # scales up the input embeddings by sqrt(d_model)
    untie_biases: true # unties the biases of the TransformerXL layers
    pos_emb_max_len: 5000

    # Convolution module's params
    conv_kernel_size: 31
    conv_norm_type: 'batch_norm' # batch_norm or layer_norm

    ### regularization
    dropout: 0.1 # The dropout used in most of the Conformer Modules
    dropout_emb: 0.0 # The dropout used for embeddings
    dropout_att: 0.1 # The dropout for multi-headed attention modules

  decoder:
    _target_: nemo.collections.asr.modules.ConvASRDecoder
    feat_in: null # will be filled during training based on encoder model dim
    num_classes: 69
    vocabulary: [ "AA0", "AA1", "AA2", "AE0", "AE1", "AE2", "AH0", "AH1", "AH2", "AO0", "AO1", "AO2", "AW0", "AW1",
                  "AW2", "AY0", "AY1", "AY2", "B", "CH", "D", "DH", "EH0", "EH1", "EH2", "ER0", "ER1", "ER2", "EY0",
                  "EY1", "EY2", "F", "G", "HH", "IH0", "IH1", "IH2", "IY0", "IY1", "IY2", "JH", "K", "L", "M", "N",
                  "NG", "OW0", "OW1", "OW2", "OY0", "OY1", "OY2", "P", "R", "S", "SH", "T", "TH", "UH0", "UH1", "UH2",
                  "UW0", "UW1", "UW2", "V", "W", "Y", "Z", "ZH" ]

  #  decoder:
  #    _target_: nemo.collections.asr.modules.ConvASRDecoder
  #    feat_in: null
  #    num_classes: -1
  #    vocabulary: ${model.labels}
  train_ds:
    dataset:
      #_target_: "nemo.collections.tts.data.datalayers.T5G2PDataset"
      manifest_filepath: ${train_dataset}
    dataloader_params:
      drop_last: false
      shuffle: true
      batch_size: 32 #32
      num_workers: 4

  validation_ds:
    dataset:
      #_target_: "nemo.collections.tts.data.datalayers.T5G2PDataset"
      manifest_filepath: ${validation_dataset}
    dataloader_params:
      drop_last: false
      shuffle: false
      batch_size: 32 #64
      num_workers: 4

  test_ds:
    dataset:
      #_target_: "nemo.collections.tts.data.datalayers.T5G2PDataset"
      manifest_filepath: none
    dataloader_params:
      drop_last: false
      shuffle: false
      batch_size: 32 #64
      num_workers: 4

  optim:
    name: adamw
    lr: 2.0
    # optimizer arguments
    betas: [ 0.9, 0.98 ]
    # less necessity for weight_decay as we already have large augmentations with SpecAug
    # you may need weight_decay for large models, stable AMP training, small datasets, or when lower augmentations are used
    # weight decay of 0.0 with lr of 2.0 also works fine
    weight_decay: 1e-3

    # scheduler setup
    sched:
      name: NoamAnnealing
      d_model: ${model.encoder.d_model}
      # scheduler config override
      warmup_steps: 10000
      warmup_ratio: null
      min_lr: 1e-6

trainer:
  devices: 1 # number of gpus
  max_epochs: 5
  num_nodes: 1
  accelerator: gpu
  strategy: ddp
  accumulate_grad_batches: 1
  enable_checkpointing: False  # Provided by exp_manager
  logger: False  # Provided by exp_manager
#  flush_logs_every_n_steps: 1000
  log_every_n_steps: 200
  check_val_every_n_epoch: 1

exp_manager:
  exp_dir: null
  name: ${name}
  create_tensorboard_logger: True
  create_checkpoint_callback: True
  checkpoint_callback_params:
    save_top_k: 3
    monitor: "val_per"
    mode: "min"
    save_best_model: true


#trainer:
#  devices: 2 # number of GPUs, -1 would use all available GPUs
#  num_nodes: 1
#  max_epochs: 5
#  max_steps: null # computed at runtime if not set
#  val_check_interval: 1.0 # Set to 0.25 to check 4 times per epoch, or an int for number of iterations
#  accelerator: gpu
#  strategy: ddp
#  accumulate_grad_batches: 1
#  gradient_clip_val: 0.0
#  precision: 32 # Should be set to 16 for O1 and O2 to enable the AMP.
#  log_every_n_steps: 10  # Interval of logging.
#  progress_bar_refresh_rate: 10
#  resume_from_checkpoint: null # The path to a checkpoint file to continue the training, restores the whole state including the epoch, step, LR schedulers, apex, etc.
#  num_sanity_val_steps: 0 # number of steps to perform validation steps for sanity check the validation process before starting the training, setting to 0 disables it
#  check_val_every_n_epoch: 1 # number of evaluations on validation every n epochs
#  sync_batchnorm: true
#  enable_checkpointing: False  # Provided by exp_manager
#  logger: false  # Provided by exp_manager
#
#
#exp_manager:
#  exp_dir: null
#  name: g2p_conformer_ctc
#  create_tensorboard_logger: true
#  create_checkpoint_callback: true
#  checkpoint_callback_params:
#    # in case of multiple validation sets, first one is used
#    monitor: "val_wer"
#    mode: "min"
#    save_top_k: 3
#    always_save_nemo: True # saves the checkpoints as nemo files instead of PTL checkpoints