<<<<<<< HEAD
# This config contains the default values for training Mixer-TTS model on LJSpeech dataset.
# If you want to train model on other dataset, you can change config values according to your dataset.
# Most dataset-specific arguments are in the head of the config file, see below.

name: "VITS"

=======
name: "VITS"

sample_rate: 22050

>>>>>>> vits
train_dataset: ???
validation_datasets: ???
sup_data_path: ???
sup_data_types: [ "duration_prior"]

<<<<<<< HEAD
# Default values from librosa.pyin
pitch_fmin: 65.40639132514966
pitch_fmax: 2093.004522404789

=======
>>>>>>> vits
# LJSpeech stats (per frame), train
pitch_mean: 212.35873413085938
pitch_std: 68.52806091308594

<<<<<<< HEAD
# default values for sample_rate=22050
sample_rate: 22050
=======
# default values from librosa.pyin
pitch_fmin: 65.40639132514966
pitch_fmax: 2093.004522404789

# default values for sample_rate=22050
>>>>>>> vits
n_mels: 80
n_window_size: 1024
n_window_stride: 256
n_fft: 1024
lowfreq: 0
highfreq: null
window: "hann"

pitch_loss_scale: 0.1
durs_loss_scale: 0.1
mel_loss_scale: 1.0

phoneme_dict_path: "scripts/tts_dataset_files/cmudict-0.7b-030921"
heteronyms_path: "scripts/tts_dataset_files/heteronyms-030921"
<<<<<<< HEAD
whitelist_path: "nemo_text_processing/text_normalization/en/data/whitelist_lj_speech.tsv"
=======
>>>>>>> vits

filter_channels: 768
filter_length: 1024

model:
  sample_rate: 22050
  splice_length: 64
  lr: 2e-4
  labels: ${labels}
  n_speakers: 1
  symbols_embedding_dim: 384
  max_token_duration: 75
  n_mel_channels: ${n_mels}
  pitch_embedding_kernel_size: 3
  mel_loss_coeff: 40
  hop_size: 256
  log_interval: 200
  eval_interval: 1000
  seed: 1234
  betas: [0.8,0.99]
  eps: 1e-9
  lr_decay: 0.999875
  segment_size: 8192
  init_lr_ratio: 1
  warmup_epochs: 0
  c_mel: 45
  c_kl: 1.
  inter_channels: 192
  hidden_channels: 192
  filter_channels: ${filter_channels}
  filter_length: ${filter_length}
  n_heads: 2
  p_dropout: 0.1
  n_layers_q: 3
  n_layers: 6
  use_spectral_norm: false
  mel_fmin: 0.0
  mel_fmax: null

<<<<<<< HEAD
  text_normalizer:
    _target_: nemo_text_processing.text_normalization.normalize.Normalizer
    lang: en
    input_case: cased
    whitelist: ${whitelist_path}

  text_normalizer_call_kwargs:
    verbose: false
    punct_pre_process: true
    punct_post_process: true

  text_tokenizer:
    _target_: nemo.collections.tts.torch.tts_tokenizers.EnglishPhonemesTokenizer
    punct: true
    stresses: true
    chars: true
    apostrophe: true
    pad_with_space: true
    g2p:
      _target_: nemo.collections.tts.torch.g2ps.EnglishG2p
      phoneme_dict: ${phoneme_dict_path}
      heteronyms: ${heteronyms_path}

=======
>>>>>>> vits
  train_ds:
    dataset:
      _target_: "nemo.collections.tts.torch.data.TTSDataset"
      manifest_filepath: ${train_dataset}
      sample_rate: ${sample_rate}
      sup_data_path: ${sup_data_path}
      sup_data_types: ${sup_data_types}
      n_fft: ${n_fft}
      win_length: ${n_window_size}
      hop_length: ${n_window_stride}
      window: ${window}
      n_mels: ${n_mels}
      lowfreq: ${lowfreq}
      highfreq: ${highfreq}
      max_duration: null
      min_duration: 0.1
      ignore_file: null
      trim: False
      pitch_fmin: ${pitch_fmin}
      pitch_fmax: ${pitch_fmax}

<<<<<<< HEAD

    dataloader_params:
      drop_last: false
      shuffle: true
      batch_size: 16
=======
      text_tokenizer:
        _target_: "nemo.collections.tts.torch.tts_tokenizers.EnglishPhonemesTokenizer"
        punct: True
        stresses: True
        chars: True
        space: ' '
        silence: null
        apostrophe: True
        sep: '|'
        add_blank_at: null
        pad_with_space: True
        g2p:
          _target_: "nemo.collections.tts.torch.g2ps.EnglishG2p"
          phoneme_dict: ${phoneme_dict_path}
          heteronyms: ${heteronyms_path}
    dataloader_params:
      drop_last: false
      shuffle: true
      batch_size: 2
>>>>>>> vits
      num_workers: 4
      pin_memory: false

  validation_ds:
    dataset:
      _target_: "nemo.collections.tts.torch.data.TTSDataset"
      manifest_filepath: ${validation_datasets}
      sample_rate: ${sample_rate}
      sup_data_path: ${sup_data_path}
      sup_data_types: ${sup_data_types}
      n_fft: ${n_fft}
      win_length: ${n_window_size}
      hop_length: ${n_window_stride}
      window: ${window}
      n_mels: ${n_mels}
      lowfreq: ${lowfreq}
      highfreq: ${highfreq}
      max_duration: null
      min_duration: 0.1
      ignore_file: null
      trim: False
      pitch_fmin: ${pitch_fmin}
      pitch_fmax: ${pitch_fmax}

<<<<<<< HEAD
=======
      text_tokenizer:
        _target_: "nemo.collections.tts.torch.tts_tokenizers.EnglishPhonemesTokenizer"
        punct: True
        stresses: True
        chars: True
        space: ' '
        silence: null
        apostrophe: True
        sep: '|'
        add_blank_at: null
        pad_with_space: True
        g2p:
          _target_: "nemo.collections.tts.torch.g2ps.EnglishG2p"
          phoneme_dict: ${phoneme_dict_path}
          heteronyms: ${heteronyms_path}
>>>>>>> vits

    dataloader_params:
      drop_last: false
      shuffle: true
<<<<<<< HEAD
      batch_size: 16
=======
      batch_size: 2
>>>>>>> vits
      num_workers: 1
      pin_memory: false


  preprocessor:
    _target_: nemo.collections.asr.parts.preprocessing.features.FilterbankFeatures
    dither: 0.0
    nfilt: ${model.n_mel_channels}
    frame_splicing: 1
    highfreq: 8000
    log: true
    log_zero_guard_type: clamp
    log_zero_guard_value: 1e-05
    lowfreq: 0
    mag_power: 1.0
    n_fft: 1024
    n_window_size: ${n_window_size}
    n_window_stride: ${model.hop_size}
    normalize: null
    pad_to: 1
    pad_value: 0
    preemph: null
    stft_conv: false
    nb_augmentation_prob : 0
    sample_rate: ${model.sample_rate}
    window: hann
    exact_pad: true
    use_grads: false

  input_fft:
    _target_: nemo.collections.tts.modules.transformer.FFTransformerEncoder
    n_layer: 6
    n_head: 1
    d_model: ${model.symbols_embedding_dim}
    d_head: 64
    d_inner: 1536
    kernel_size: 3
    dropout: 0.1
    dropatt: 0.1
    dropemb: 0.0
    n_embed: 148  # NOTE Should match # of tokens in `symbol_set`
    d_embed: ${model.symbols_embedding_dim}
    padding_idx: 0

  output_fft:
    _target_: nemo.collections.tts.modules.transformer.FFTransformerDecoder
    n_layer: 6
    n_head: 1
    d_model: ${model.symbols_embedding_dim}
    d_head: 64
    d_inner: 1536
    kernel_size: 3
    dropout: 0.1
    dropatt: 0.1
    dropemb: 0.0

  duration_predictor:
    _target_: nemo.collections.tts.modules.vits_modules.StochasticDurationPredictor
    in_channels: ${model.symbols_embedding_dim} # input_size: ${model.symbols_embedding_dim}
    kernel_size: 3
    filter_channels: ${filter_length} # filter_size: 256
    p_dropout: 0.1 # dropout: 0.1
    # n_layers: 6

  pitch_predictor:
    _target_: nemo.collections.tts.modules.fastpitch.TemporalPredictor
    input_size: ${model.symbols_embedding_dim}
    kernel_size: 3
    filter_size: ${filter_length}
    dropout: 0.1
    n_layers: ${model.n_layers}

  generator:
    _target_: nemo.collections.tts.modules.vits_modules.Generator
    resblock: "1"
    resblock_kernel_sizes: [3,7,11]
    resblock_dilation_sizes: [[1,3,5], [1,3,5], [1,3,5]]
    upsample_rates: [8,8,2,2]
    upsample_initial_channel: 512
    upsample_kernel_sizes: [16,16,4,4]
    initial_channel: 384 # initial_input_size: 384

trainer:
<<<<<<< HEAD
  num_nodes: 1
  devices: 1
  accelerator: gpu
  strategy: ddp
  precision: 16
  max_epochs: 1000
  accumulate_grad_batches: 1
  # gradient_clip_val: 1000.0
  checkpoint_callback: false # Provided by exp_manager
  logger: false # Provided by exp_manager
  log_every_n_steps: 100
  flush_logs_every_n_steps: 1000
=======
  gpus: -1 # number of gpus
  max_epochs: 20000
  num_nodes: 1
  accelerator: ddp
  accumulate_grad_batches: 1
  checkpoint_callback: False  # Provided by exp_manager
  logger: False  # Provided by exp_manager
  # gradient_clip_val: 1000.0
  flush_logs_every_n_steps: 1000
  log_every_n_steps: 100
>>>>>>> vits
  check_val_every_n_epoch: 5

exp_manager:
  exp_dir: null
  name: ${name}
<<<<<<< HEAD
  create_tensorboard_logger: true
  create_checkpoint_callback: true
  checkpoint_callback_params:
    monitor: val_mel_loss
    mode: min
  create_wandb_logger: false
  wandb_logger_kwargs:
    name: null
    project: null
    entity: null
  resume_if_exists: false
  resume_ignore_no_checkpoint: false
=======
  create_tensorboard_logger: True
  create_checkpoint_callback: True
>>>>>>> vits
